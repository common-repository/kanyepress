{"version":3,"sources":["components/Quote/Quote.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Quote","render","props","quote","isLoading","className","Component","axios","create","baseURL","responseType","App","componentDidMount","refreshQuote","e","setState","API","get","then","res","data","catch","console","log","state","onClick","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uNAEqBA,E,2MAEnBC,OAAS,WAAO,IAAD,EAEgB,EAAKC,MAA1BC,EAFK,EAELA,MAAOC,EAFF,EAEEA,UAGf,OACE,0BAAMC,UAAU,oBAAoBD,EAHf,MAG4CD,I,6BARpCG,a,QCApBC,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,kCACTC,aAAc,SC+CDC,E,YA5Cb,WAAYT,GAAQ,IAAD,8BACjB,4CAAMA,KAORU,kBAAoB,WAClB,EAAKC,gBATY,EAYnBA,aAAe,SAACC,GAEd,EAAKC,SAAS,CAAEX,WAAW,IAE3BY,EAAIC,IAAI,2BACPC,KAAK,SAAAC,GACJ,IAAIhB,EAAQgB,EAAIC,KAAKjB,MACrB,EAAKY,SAAS,CACZX,WAAW,EACXD,MAAOA,MAGVkB,MAAO,SAAAP,GACNQ,QAAQC,IAAR,6CAAwCT,OAzBzB,EA8BnBb,OAAS,WAAO,IAAD,EAEgB,EAAKuB,MAA1BpB,EAFK,EAELA,UAAWD,EAFN,EAEMA,MAEnB,OACE,0BAAME,UAAU,aACd,kBAAC,EAAD,CAAOD,UAAWA,EAAWD,MAAOA,IACpC,4BAAQsB,QAAS,EAAKZ,iBAnC1B,EAAKW,MAAQ,CACXpB,WAAW,EACXD,MAAO,IAJQ,E,2BAFHG,aCOEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAAS9B,OAAO,kBAAC,EAAD,MAAS+B,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC,iB","file":"static/js/main.377356de.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Quote extends Component {\n\n  render = () => {\n\n    const { quote, isLoading } = this.props;\n    const loadingMessage = \"...\"\n\n    return (\n      <span className=\"kanypress--quote\">{isLoading ? loadingMessage : quote}</span>\n    )\n  }\n\n}\n","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http://www.recipepuppy.com/api/\",\n  responseType: \"json\"\n});\n","import React, { Component } from 'react';\nimport Quote from './components/Quote/Quote'\n\nimport API from './utils/API'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      quote: \"\"\n    }\n  }\n\n  componentDidMount = () => {\n    this.refreshQuote()\n  }\n\n  refreshQuote = (e) => {\n\n    this.setState({ isLoading: true })\n\n    API.get(\"https://api.kanye.rest/\")\n    .then(res => {\n      let quote = res.data.quote\n      this.setState({\n        isLoading: false,\n        quote: quote\n      })\n    })\n    .catch( e => {\n      console.log(`ðŸ˜± Axios request failed: ${e}`)\n    })\n\n  }\n\n  render = () => {\n\n    const { isLoading, quote } = this.state\n\n    return (\n      <span className=\"kanypress\">\n        <Quote isLoading={isLoading} quote={quote}></Quote>\n        <button onClick={this.refreshQuote}></button>\n      </span>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}